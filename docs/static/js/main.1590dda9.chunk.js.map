{"version":3,"sources":["services/api.js","components/GifItem.js","components/GifList.js","App.js","serviceWorker.js","index.js"],"names":["require","config","API_KEY","process","getGifs","keyword","apiURL","fetch","then","response","json","data","map","image","title","id","url","images","downsized_medium","GifItem","props","href","className","src","alt","GifList","params","useState","loading","setLoading","gifs","setGifs","useEffect","singleGif","key","App","exact","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8OAAAA,EAAQ,IAAUC,SAElB,IAAMC,EAAUC,mCAmBDC,MAjBf,WAA8C,IAAD,yDAAJ,GAAI,IAA1BC,eAA0B,MAAhB,QAAgB,EACrCC,EAAM,uDAAmDJ,EAAnD,cAAgEG,EAAhE,uCAEZ,OAAOE,MAAMD,GACVE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAQL,OAPiBA,EAATE,KACUC,KAAI,SAACC,GAIrB,MAAO,CAAEC,MAHqBD,EAAtBC,MAGQC,GAHcF,EAAfE,GAGKC,IAHUH,EAAXI,OACIC,iBAAfF,Y,MCCDG,MAXf,SAAiBC,GAAQ,IACfN,EAAmBM,EAAnBN,MAAOC,EAAYK,EAAZL,GAAIC,EAAQI,EAARJ,IAEnB,OACE,uBAAGK,KAAI,WAAMN,GAAMO,UAAU,iBAC3B,gCAAMR,GACN,yBAAKS,IAAKP,EAAKQ,IAAKV,MC+BXW,MApCf,SAAiBL,GAAQ,IAEff,EADWe,EAAXM,OACArB,QAFc,EAGQsB,oBAAS,GAHjB,mBAGfC,EAHe,KAGNC,EAHM,OAMEF,mBAAS,IANX,mBAMfG,EANe,KAMTC,EANS,KAiBtB,OATAC,qBAAU,WACRH,GAAW,GACXzB,EAAQ,CAAEC,YACTG,MAAK,SAACsB,GACHC,EAAQD,GACRD,GAAW,QACd,CAACxB,IAGAuB,EAAgB,0CAMlB,kBAAC,WAAD,KACGE,EAAKlB,KAAI,SAACqB,GAAD,OACR,kBAAC,EAAD,CACEC,IAAKD,EAAUlB,GACfA,GAAIkB,EAAUlB,GACdD,MAAOmB,EAAUnB,MACjBE,IAAKiB,EAAUjB,W,OCFVmB,MA1Bf,WAEE,OACE,yBAAKb,UAAU,OACb,6BAASA,UAAU,eACjB,kBAAC,IAAD,CAAMc,OAAK,EAACC,GAAG,KACb,wDAGF,yBAAKf,UAAU,eACb,kBAAC,IAAD,CAAMe,GAAG,cAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,OACA,kBAAC,IAAD,CAAMA,GAAG,eAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,gBAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,iBAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,iBAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,UAIF,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,UAAWd,OCb3Be,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1590dda9.chunk.js","sourcesContent":["require('dotenv').config();\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nfunction getGifs({ keyword = 'think' } = {}) {\n  const apiURL = `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${keyword}&limit=10&offset=0&rating=G&lang=en`;\n\n  return fetch(apiURL)\n    .then((response) => response.json())\n    .then((response) => {\n      const { data } = response;\n      const gifs = data.map((image) => {\n        const { title, id, images } = image;\n        const { url } = images.downsized_medium;\n\n        return { title, id, url };\n      });\n      return gifs;\n    });\n}\n\nexport default getGifs;\n","import React from 'react';\nimport '../stylesheets/Gif.css'\n\nfunction GifItem(props) {\n  const { title, id, url } = props;\n\n  return (\n    <a href={`#${id}`} className='gif-container'>\n      <h4> {title}</h4>\n      <img src={url} alt={title} />\n    </a>\n  );\n}\n\nexport default GifItem;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport getGifs from '../services/api';\nimport GifItem from './GifItem';\n\nfunction GifList(props) {\n  const { params } = props;\n  const { keyword } = params; \n  const [loading, setLoading] = useState(false)\n\n\n  const [gifs, setGifs] = useState([]);\n\n  useEffect(function () {\n    setLoading(true)\n    getGifs({ keyword })\n    .then((gifs) => {\n        setGifs(gifs)\n        setLoading(false)})\n  }, [keyword]);\n\n\n  if (loading) return <h2>Loading...</h2> \n\n\n\n\n  return (\n    <Fragment>\n      {gifs.map((singleGif) => (\n        <GifItem\n          key={singleGif.id}\n          id={singleGif.id}\n          title={singleGif.title}\n          url={singleGif.url}\n        />\n      ))}\n    </Fragment>\n  );\n}\n\nexport default GifList;\n","import React /* { useState } */ from 'react';\nimport './stylesheets/App.css';\nimport GifList from './components/GifList';\nimport { Route, Link } from 'wouter';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <section className=\"App-content\">\n        <Link exact to=\"/\">\n          <h1>What's your mood today?</h1>\n        </Link>\n\n        <div className=\"gif-options\">\n          <Link to=\"/gif/happy\">Happy</Link>\n          <Link to=\"/gif/sad\">Sad</Link>\n          <Link to=\"/gif/boring\">Boring</Link>\n          <Link to=\"/gif/hopeful\">Hopeful</Link>\n          <Link to=\"/gif/romantic\">Romantic</Link>\n          <Link to=\"/gif/humorous\">Humorous</Link>\n          <Link to=\"/gif/angry\">Angry</Link>\n        </div>\n\n\n        <Route path=\"/gif/:keyword\" component={GifList} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}